#include<graphics.h>
#define SVGA320x200x256 0	/* 320x200x256 Standard VGA */
#define SVGA640x400x256 1	/* 640x400x256 Svga/VESA */
#define SVGA640x480x256 2	/* 640x480x256 Svga/VESA */
#define SVGA800x600x256 3	/* 800x600x256 Svga/VESA */
#define SVGA1024x768x256 4	/* 1024x768x256 Svga/VESA */
#define SVGA640x350x256 5	/* 640x350x256 Svga/VESA */
#define SVGA1280x1024x256 6 /* 1280x1024x256 Svga/VESA */
#include<dos.h>
#include<dir.h>
#ifdef _WIN32
#define huge
#endif
#include<stdio.h>
#include<conio.h>
enum HexColor
{
    hex000000,
    hex800000,//深红色
    hex008000,//深绿色
    hex808000,
    hex000080,//深蓝色
    hex800080,
    hex008080,
    hexc0c0c0,
    hexc0dcc0,
    hexa6caf0,
    hex2a3faa,
    hex2a3fff,
    hex2a5f00,
    hex2a5f55,
    hex2a5faa,
    hex2a5fff,
    hex2a7f00,
    hex2a7f55,
    hex2a7faa,
    hex2a7fff,
    hex2a9f00,
    hex2a9f55,
    hex2a9faa,
    hex2a9fff,
    hex2abf00,
    hex2abf55,
    hex2abfaa,
    hex2abfff,
    hex2adf00,
    hex2adf55,
    hex2adfaa,
    hex2adfff,
    hex2aff00,
    hex2aff55,
    hex2affaa,
    hex2affff,
    hex550000,
    hex550055,
    hex5500aa,
    hex5500ff,
    hex551f00,
    hex551f55,
    hex551faa,
    hex551fff,
    hex553f00,
    hex553f55,
    hex553faa,
    hex553fff,
    hex555f00,
    hex555f55,
    hex555faa,
    hex555fff,
    hex557f00,
    hex557f55,
    hex557faa,
    hex557fff,
    hex559f00,
    hex559f55,
    hex559faa,
    hex559fff,
    hex55bf00,
    hex55bf55,
    hex55bfaa,
    hex55bfff,
    hex55df00,
    hex55df55,
    hex55dfaa,
    hex55dfff,
    hex55ff00,
    hex55ff55,
    hex55ffaa,
    hex55ffff,
    hex7f0000,
    hex7f0055,
    hex7f00aa,
    hex7f00ff,
    hex7f1f00,
    hex7f1f55,
    hex7f1faa,
    hex7f1fff,
    hex7f3f00,
    hex7f3f55,
    hex7f3faa,
    hex7f3fff,
    hex7f5f00,
    hex7f5f55,
    hex7f5faa,
    hex7f5fff,
    hex7f7f00,
    hex7f7f55,
    hex7f7faa,
    hex7f7fff,
    hex7f9f00,
    hex7f9f55,
    hex7f9faa,
    hex7f9fff,
    hex7fbf00,
    hex7fbf55,
    hex7fbfaa,
    hex7fbfff,
    hex7fdf00,
    hex7fdf55,
    hex7fdfaa,
    hex7fdfff,
    hex7fff00,
    hex7fff55,
    hex7fffaa,
    hex7fffff,
    hexaa0000,
    hexaa0055,
    hexaa00aa,
    hexaa00ff,
    hexaa1f00,
    hexaa1f55,
    hexaa1faa,
    hexaa1fff,
    hexaa3f00,
    hexaa3f55,
    hexaa3faa,
    hexaa3fff,
    hexaa5f00,
    hexaa5f55,
    hexaa5faa,
    hexaa5fff,
    hexaa7f00,
    hexaa7f55,
    hexaa7faa,
    hexaa7fff,
    hexaa9f00,
    hexaa9f55,
    hexaa9faa,
    hexaa9fff,
    hexaabf00,
    hexaabf55,
    hexaabfaa,
    hexaabfff,
    hexaadf00,
    hexaadf55,
    hexaadfaa,
    hexaadfff,
    hexaaff00,
    hexaaff55,
    hexaaffaa,
    hexaaffff,
    hexd40000,
    hexd40055,
    hexd400aa,
    hexd400ff,
    hexd41f00,
    hexd41f55,
    hexd41faa,
    hexd41fff,
    hexd43f00,
    hexd43f55,
    hexd43faa,
    hexd43fff,
    hexd45f00,
    hexd45f55,
    hexd45faa,
    hexd45fff,
    hexd47f00,
    hexd47f55,
    hexd47faa,
    hexd47fff,
    hexd49f00,
    hexd49f55,
    hexd49faa,
    hexd49fff,
    hexd4bf00,
    hexd4bf55,
    hexd4bfaa,
    hexd4bfff,
    hexd4df00,
    hexd4df55,
    hexd4dfaa,
    hexd4dfff,
    hexd4ff00,
    hexd4ff55,
    hexd4ffaa,
    hexd4ffff,
    hexff0055,
    hexff00aa,
    hexff1f00,
    hexff1f55,
    hexff1faa,
    hexff1fff,
    hexff3f00,
    hexff3f55,
    hexff3faa,
    hexff3fff,
    hexff5f00,
    hexff5f55,
    hexff5faa,
    hexff5fff,
    hexff7f00,
    hexff7f55,
    hexff7faa,
    hexff7fff,
    hexff9f00,
    hexff9f55,
    hexff9faa,
    hexff9fff,
    hexffbf00,
    hexffbf55,
    hexffbfaa,
    hexffbfff,
    hexffdf00,
    hexffdf55,
    hexffdfaa,
    hexffdfff,
    hexffff55,
    hexffffaa,
    hexccccff,
    hexffccff,
    hex33ffff,
    hex66ffff,
    hex99ffff,
    hexccffff,
    hex007f00,
    hex007f55,
    hex007faa,
    hex007fff,
    hex009f00,
    hex009f55,
    hex009faa,
    hex009fff,
    hex00bf00,
    hex00bf55,
    hex00bfaa,
    hex00bfff,
    hex00df00,
    hex00df55,
    hex00dfaa,
    hex00dfff,
    hex00ff55,
    hex00ffaa,
    hex2a0000,
    hex2a0055,
    hex2a00aa,
    hex2a00ff,
    hex2a1f00,
    hex2a1f55,
    hex2a1faa,
    hex2a1fff,
    hex2a3f00,
    hex2a3f55,
    hexfffbf0,
    hexa0a0a4,
    hex808080,
    hexff0000,
    hex00ff00,
    hexffff00,
    hex0000ff,
    hexff00ff,
    hex00ffff,
    hexffffff
};


enum MyColors{
	_WHITE = hexffffff,
	_BLACK = hex000000,
	_GRAY = hex808080,
	_BLUE = hex0000ff,
	_RED = hexff0000
};
typedef unsigned char DacPalette256[256][3];
void setvgapalette256(DacPalette256 *PalBuf)
{
  struct REGPACK reg;

  reg.r_ax = 0x1012;
  reg.r_bx = 0;
  reg.r_cx = 256;
  reg.r_es = FP_SEG(PalBuf);
  reg.r_dx = FP_OFF(PalBuf);
  intr(0x10,&reg);
}

void useRGB256Colors(){
	unsigned long hexColors[]={
		0x000000,
		0x800000,
		0x008000,
		0x808000,
		0x000080,
		0x800080,
		0x008080,
		0xc0c0c0,
		0xc0dcc0,
		0xa6caf0,
		0x2a3faa,
		0x2a3fff,
		0x2a5f00,
		0x2a5f55,
		0x2a5faa,
		0x2a5fff,
		0x2a7f00,
		0x2a7f55,
		0x2a7faa,
		0x2a7fff,
		0x2a9f00,
		0x2a9f55,
		0x2a9faa,
		0x2a9fff,
		0x2abf00,
		0x2abf55,
		0x2abfaa,
		0x2abfff,
		0x2adf00,
		0x2adf55,
		0x2adfaa,
		0x2adfff,
		0x2aff00,
		0x2aff55,
		0x2affaa,
		0x2affff,
		0x550000,
		0x550055,
		0x5500aa,
		0x5500ff,
		0x551f00,
		0x551f55,
		0x551faa,
		0x551fff,
		0x553f00,
		0x553f55,
		0x553faa,
		0x553fff,
		0x555f00,
		0x555f55,
		0x555faa,
		0x555fff,
		0x557f00,
		0x557f55,
		0x557faa,
		0x557fff,
		0x559f00,
		0x559f55,
		0x559faa,
		0x559fff,
		0x55bf00,
		0x55bf55,
		0x55bfaa,
		0x55bfff,
		0x55df00,
		0x55df55,
		0x55dfaa,
		0x55dfff,
		0x55ff00,
		0x55ff55,
		0x55ffaa,
		0x55ffff,
		0x7f0000,
		0x7f0055,
		0x7f00aa,
		0x7f00ff,
		0x7f1f00,
		0x7f1f55,
		0x7f1faa,
		0x7f1fff,
		0x7f3f00,
		0x7f3f55,
		0x7f3faa,
		0x7f3fff,
		0x7f5f00,
		0x7f5f55,
		0x7f5faa,
		0x7f5fff,
		0x7f7f00,
		0x7f7f55,
		0x7f7faa,
		0x7f7fff,
		0x7f9f00,
		0x7f9f55,
		0x7f9faa,
		0x7f9fff,
		0x7fbf00,
		0x7fbf55,
		0x7fbfaa,
		0x7fbfff,
		0x7fdf00,
		0x7fdf55,
		0x7fdfaa,
		0x7fdfff,
		0x7fff00,
		0x7fff55,
		0x7fffaa,
		0x7fffff,
		0xaa0000,
		0xaa0055,
		0xaa00aa,
		0xaa00ff,
		0xaa1f00,
		0xaa1f55,
		0xaa1faa,
		0xaa1fff,
		0xaa3f00,
		0xaa3f55,
		0xaa3faa,
		0xaa3fff,
		0xaa5f00,
		0xaa5f55,
		0xaa5faa,
		0xaa5fff,
		0xaa7f00,
		0xaa7f55,
		0xaa7faa,
		0xaa7fff,
		0xaa9f00,
		0xaa9f55,
		0xaa9faa,
		0xaa9fff,
		0xaabf00,
		0xaabf55,
		0xaabfaa,
		0xaabfff,
		0xaadf00,
		0xaadf55,
		0xaadfaa,
		0xaadfff,
		0xaaff00,
		0xaaff55,
		0xaaffaa,
		0xaaffff,
		0xd40000,
		0xd40055,
		0xd400aa,
		0xd400ff,
		0xd41f00,
		0xd41f55,
		0xd41faa,
		0xd41fff,
		0xd43f00,
		0xd43f55,
		0xd43faa,
		0xd43fff,
		0xd45f00,
		0xd45f55,
		0xd45faa,
		0xd45fff,
		0xd47f00,
		0xd47f55,
		0xd47faa,
		0xd47fff,
		0xd49f00,
		0xd49f55,
		0xd49faa,
		0xd49fff,
		0xd4bf00,
		0xd4bf55,
		0xd4bfaa,
		0xd4bfff,
		0xd4df00,
		0xd4df55,
		0xd4dfaa,
		0xd4dfff,
		0xd4ff00,
		0xd4ff55,
		0xd4ffaa,
		0xd4ffff,
		0xff0055,
		0xff00aa,
		0xff1f00,
		0xff1f55,
		0xff1faa,
		0xff1fff,
		0xff3f00,
		0xff3f55,
		0xff3faa,
		0xff3fff,
		0xff5f00,
		0xff5f55,
		0xff5faa,
		0xff5fff,
		0xff7f00,
		0xff7f55,
		0xff7faa,
		0xff7fff,
		0xff9f00,
		0xff9f55,
		0xff9faa,
		0xff9fff,
		0xffbf00,
		0xffbf55,
		0xffbfaa,
		0xffbfff,
		0xffdf00,
		0xffdf55,
		0xffdfaa,
		0xffdfff,
		0xffff55,
		0xffffaa,
		0xccccff,
		0xffccff,
		0x33ffff,
		0x66ffff,
		0x99ffff,
		0xccffff,
		0x007f00,
		0x007f55,
		0x007faa,
		0x007fff,
		0x009f00,
		0x009f55,
		0x009faa,
		0x009fff,
		0x00bf00,
		0x00bf55,
		0x00bfaa,
		0x00bfff,
		0x00df00,
		0x00df55,
		0x00dfaa,
		0x00dfff,
		0x00ff55,
		0x00ffaa,
		0x2a0000,
		0x2a0055,
		0x2a00aa,
		0x2a00ff,
		0x2a1f00,
		0x2a1f55,
		0x2a1faa,
		0x2a1fff,
		0x2a3f00,
		0x2a3f55,
		0xfffbf0,
		0xa0a0a4,
		0x808080,
		0xff0000,
		0x00ff00,
		0xffff00,
		0x0000ff,
		0xff00ff,
		0x00ffff,
		0xffffff
	};
	DacPalette256 win_color;
	for (int i = 0; i < 256; i++)
	{
		win_color[i][0] = (hexColors[i] >> 16) / 4;
		win_color[i][1] = ((hexColors[i] & 0x00ff00) >> 8) / 4;
		win_color[i][2] = (hexColors[i] & 0x0000ff) / 4;
	}
	setvgapalette256(&win_color);
	return;
}

int huge detectSVGA256(void){
	return SVGA1024x768x256;
}

int initSVGA(void){
	chdir("C:\\NOTEPRO1.0\\LIB\\SVGA");
	installuserdriver("SVGA256",detectSVGA256);
	int G_driver = DETECT ,G_model;


	initgraph(&G_driver,&G_model," ");
	return 1;

}
void main(){
	int s = initSVGA();
	useRGB256Colors();
	setfillstyle(SOLID_FILL,15);
	bar(800,600,850,650);
	setfillstyle(SOLID_FILL,250);
	bar(60,60,65,65);
	//setfillstyle(SOLID_FILL,hex2a9f00);
	setcolor(45);
	line(70,70,1024,768);

	//setfillstyle(SOLID_FILL,_DARKGRAY);
	//bar(50,50,100,100);
	getch();
	printf("%d",s);
	closegraph();

}